---
title: "Project1"
format: html
editor: visual
---

## Data Processing

### First Steps - Read in one section of the data.

**1. Read in the data and select only few columns as required.**

```{r}
library(tidyverse)
data <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
data <- data |>
  select(Area_name, STCOU, ends_with("D")) |>
  rename(area_name=Area_name)
data
```

**2. Convert the data into long format where each row has only one enrollment value for that Area_name.**

```{r}
library(tidyr)
data <- data |>
  pivot_longer(cols=3:12,
               names_to = "label",
               values_to = "enrollment_value")
data
```

**3. Parse the "label" string**\
For the "label" column, the first three characters represent the survey with the next four representing the type of value you have from that survey. The last two digits prior to the “D” represent the year of the measurement.

-   Parse the "label" string to pull out the year and convert the year into a numeric value such as 1997 or 2002.
-   Grab the first three characters and following four digits to create a new variable representing which measurement was grabbed.

```{r}
#create a function to convert two-digit character to four-digit numeric year.
convert_year <- function(year) {
  year <- as.numeric(year)
  ifelse(year > 24, 1900 + year, 2000 + year)
}

data <- data |>
  # parse the "label" string
  mutate(year=substr(label, 8, 9)) |>
  mutate(year=convert_year(year)) |>
  # grab measurement information
  mutate(measurement = substr(label, 1, 7))
data

```

**4. Create two data sets**

-   one data set that contains only non-county data
-   one data set that contains only county level data

```{r}
data_noncounty <- data [-grep(pattern = ", \\w\\w", data$area_name),]
data_noncounty
data_county <- data [grep(pattern = ", \\w\\w", data$area_name),]
data_county
```

-   For the county level data, add a class to the tibble called county.
-   Similarly, add a class to the non-county data called state.

```{r}
class(data_county) <- c("county", class(data_county))
class(data_county)
class(data_noncounty) <- c("state", class(data_noncounty))
class(data_noncounty)
```

**5. For the county level tibble, create a new variable that describes which state one of these county measurements corresponds to.**

```{r}
data_county <- data_county |>
  mutate(state = substr(area_name, nchar(area_name)-1, nchar(area_name)))
data_county
```

**6. For the non-county level tibble, create a new variable called “division” corresponding to the state’s classification of division here. If row corresponds to a non-state (i.e. UNITED STATES), return ERROR for the division. The code for this part will not be a ton of fun but can be made easier with the use of %in%.**

```{r}
# define the state’s classification of division
Northeast <- c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", 
               "NEW JERSEY", "NEW YORK", "PENNSYLVANIA", "RHODE ISLAND",
               "VERMONT")
Midwest <- c("ILLINOIS", "INDIANA", "IOWA", "KANSAS", "MICHIGAN", 
             "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA",
             "OHIO", "SOUTH DAKOTA", "WISCONSIN")
South <- c("ALABAMA", "ARKANSAS", "DELAWARE", "DISTRICT OF COLUMBIA",
           "FLORIDA", "GEORGIA", "KENTUCKY", "LOUISIANA", "MARYLAND",
           "MISSISSIPPI", "NORTH CAROLINA", "OKLAHOMA", "SOUTH CAROLINA",
           "TENNESSEE", "TEXAS", "VIRGINIA", "WEST VIRGINIA")
West <- c("ALASKA", "ARIZONA", "CALIFORNIA", "COLORADO", "HAWAII", "IDAHO",
          "MONTANA", "NEVADA", "NEW MEXICO", "OREGON", "UTAH", "WASHINGTON",
          "WYOMING")

data_noncounty <- data_noncounty |>
  # convert area_name to upper case
  mutate(area_name = toupper(area_name)) |>
  # classify the states
  mutate(division = ifelse(area_name == "UNITED STATES", "ERROR", 
                           ifelse (area_name %in% Northeast,
                                   "Northeast", 
                                   ifelse(area_name %in% Midwest,
                                          "Midwest", 
                                          ifelse(area_name %in% South,
                                                 "South",
                                                 ifelse(area_name %in% West, 
                                                        "West", 
                                                        "CHECK"))))))
data_noncounty
```


**Now we want to repeat the above process for the 2nd component of the data set.**

```{r}
data2 <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")

# Define the function for steps 1 and 2
function_for_step_1_2 <- function(data, value_col_name = "enrollment_value") {
  data2 <- data2 |>
    select(Area_name, STCOU, ends_with("D")) |>
    rename(area_name = Area_name)
  
  data2 <- data2 |>
    pivot_longer(cols = 3:12, 
                 names_to = "label", 
                 values_to = value_col_name)
  
  return(data2)
}

# Process the data
data2 <- function_for_step_1_2(data2)

# Define the function for step 3
function_for_step_3 <- function(data) {
  data2 <- data2 |>
    mutate(year = substr(label, 8, 9)) |>
    mutate(year = as.numeric(year)) |>
    mutate(year = ifelse(year > 24, 1900 + year, 2000 + year)) |>
    mutate(measurement = substr(label, 1, 7))
  
  return(data2)
}

# Process the data
data2 <- function_for_step_3(data2)

```

